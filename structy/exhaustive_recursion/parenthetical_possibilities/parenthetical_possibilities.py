# Write a function, parenthetical_possibilities, that takes in a string as an argument.
# The function should return an array containing all of the strings that could be
# generated by expanding all parentheses of the string into its possibilities.

# For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.

def parenthetical_possibilities(s):
  if len(s) == 0:
    return ['']

  res = []
  choices, remainder = get_choices(s)
  for choice in choices:
    remainder_possibilities = parenthetical_possibilities(remainder)
    for possibility in remainder_possibilities:
      res.append(choice + possibility)

  return res

def get_choices(s):
  if s[0] == '(':
    # group
    end = s.index(')')
    choices = s[1:end]
    remainder = s[end + 1:]
    print(choices, remainder)
    return (choices, remainder)
  else:
    # regular char
    print(s[0], s[1:])
    return (s[0], s[1:])

# n = length of string
# m = length of largest parenthetical group
# time: O(m^n)
# space: O(m^n)
